{"version":3,"sources":["components/header/header.js","components/book/book.js","components/book-shelf/book-shelf.js","BooksAPI.js","components/search-books/search-box.js","components/book-list/book-list.js","App.js","reportWebVitals.js","index.js"],"names":["Header","shelves","getAllBooks","className","map","shelf","to","id","onClick","title","Book","state","selected","selectedClass","book","a","setState","props","onUpdate","this","toggleClass","activeClass","authors","imageLinks","alt","src","thumbnail","author","index","specShelf","undefined","Component","BookShelf","active","bookId","status","specificShelves","books","location","pathName","pathname","split","filter","specificShelf","length","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","update","method","body","JSON","stringify","search","query","SearchBooks","searchBooks","handleChange","e","target","name","value","handleSearch","trim","BooksAPI","Array","isArray","handleShelf","console","log","oldBook","find","searchBook","indexOf","updateShelf","addShelfToState","type","placeholder","onChange","withRouter","BookList","path","component","filteredBooks","relatedBook","pathURL","render","App","changeQuery","SHELVES","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.255ac7ae.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./header.styles.scss\";\r\n\r\nconst Header = ({ shelves, getAllBooks }) => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <div className=\"logo\">\r\n                    <i className=\"fas fa-book-reader\"></i>\r\n                </div>\r\n                <ul>\r\n                    {shelves.map((shelf) => (\r\n                        <li key={shelf.id}>\r\n                            <NavLink to={shelf.id} onClick={getAllBooks}>\r\n                                {shelf.title}\r\n                            </NavLink>\r\n                        </li>\r\n                    ))}\r\n                    <li>\r\n                        <NavLink to=\"/search\">Search</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./book.styles.scss\";\r\n\r\nclass Book extends Component {\r\n    static propTypes = {\r\n        book: PropTypes.object.isRequired,\r\n        onUpdate: PropTypes.func.isRequired,\r\n    };\r\n\r\n    state = {\r\n        selected: false,\r\n    };\r\n\r\n    selectedClass = async (book, id) => {\r\n        this.setState({ selected: true });\r\n        await this.props.onUpdate(book, id);\r\n        this.setState({ selected: false });\r\n    };\r\n\r\n    state = {};\r\n    render() {\r\n        const { book, shelves, toggleClass, activeClass } = this.props;\r\n        const { id, title, shelf, authors, imageLinks } = book;\r\n\r\n        return (\r\n            <div className=\"book\">\r\n                <div className=\"book-cover\">\r\n                    <img\r\n                        alt={title}\r\n                        src={\r\n                            (imageLinks && imageLinks.thumbnail) ||\r\n                            \"https://cdn.pixabay.com/photo/2017/02/26/21/39/rose-2101475_1280.jpg\"\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"book-title\">\r\n                    <h3>{title}</h3>\r\n                </div>\r\n                <div className=\"book-authors\">\r\n                    {authors &&\r\n                        authors.map((author, index) => (\r\n                            <span key={index}>\r\n                                {author} <br />\r\n                            </span>\r\n                        ))}\r\n                </div>\r\n\r\n                <div\r\n                    className={`book-shelves ${activeClass && \"active\"} ${\r\n                        this.state.selected && \"active\" // For prevent open two  change shelf window together.\r\n                    }`}\r\n                >\r\n                    <div\r\n                        className={`loading ${\r\n                            this.state.selected && \"selected\"\r\n                        } `}\r\n                    >\r\n                        <div></div>\r\n                    </div>\r\n\r\n                    <div className=\"box\">\r\n                        <h4>\r\n                            <span>Move To</span>\r\n                        </h4>\r\n                        {shelves.map((specShelf) =>\r\n                            specShelf.id === shelf ? (\r\n                                <div\r\n                                    className=\"book-shelf active\"\r\n                                    key={specShelf.id}\r\n                                >\r\n                                    <span>{specShelf.title}</span>\r\n                                </div>\r\n                            ) : (\r\n                                <div\r\n                                    className=\"book-shelf\"\r\n                                    key={specShelf.id}\r\n                                    onClick={() =>\r\n                                        this.selectedClass(book, specShelf.id)\r\n                                    }\r\n                                >\r\n                                    <span>{specShelf.title}</span>\r\n                                </div>\r\n                            )\r\n                        )}\r\n\r\n                        <div\r\n                            className={`book-shelf ${\r\n                                (shelf === undefined || shelf === \"none\") &&\r\n                                \"active\"\r\n                            }`}\r\n                            onClick={() => this.selectedClass(book, \"none\")}\r\n                        >\r\n                            <span>None</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className={`drop-down ${activeClass && \"active\"}`}\r\n                    onClick={() => toggleClass(id)}\r\n                >\r\n                    <i className=\"fas fa-chevron-circle-down\"></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Book;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./book-shelf.styles.scss\";\r\n\r\nimport Book from \"../book/book\";\r\n\r\nclass BookShelf extends Component {\r\n    static propTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        onUpdate: PropTypes.func.isRequired,\r\n        shelves: PropTypes.array.isRequired,\r\n        toggleClass: PropTypes.func,\r\n        activeClass: PropTypes.bool,\r\n    };\r\n\r\n    state = {\r\n        active: false,\r\n        bookId: 0,\r\n        status: false,\r\n    };\r\n\r\n    toggleClass = (bookId) => {\r\n        if (this.state.bookId === bookId) {\r\n            this.setState({ active: false, bookId: 0, status: false });\r\n        } else {\r\n            this.setState({ active: true, bookId, status: true });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { books, onUpdate, shelves, location } = this.props;\r\n        let specificShelves;\r\n        let active = false;\r\n\r\n        const pathName = location.pathname.split(\"/\")[1];\r\n\r\n        pathName !== \"search\"\r\n            ? (specificShelves = shelves.filter(\r\n                  (specificShelf) =>\r\n                      books[0] && specificShelf.id !== books[0].shelf\r\n              ))\r\n            : (specificShelves = shelves);\r\n\r\n        if (books.length === 0) {\r\n            return <h3 className=\"book-not-found\">No books found!</h3>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                {books.map((book) => {\r\n                    if (this.state.status && book.id === this.state.bookId) {\r\n                        active = true;\r\n                    } else {\r\n                        active = false;\r\n                    }\r\n\r\n                    return (\r\n                        <Book\r\n                            key={book.id}\r\n                            book={book}\r\n                            onUpdate={onUpdate}\r\n                            shelves={specificShelves}\r\n                            toggleClass={this.toggleClass}\r\n                            activeClass={active}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookShelf;\r\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport * as BooksAPI from \"../../BooksAPI\";\r\nimport BookShelf from \"../book-shelf/book-shelf\";\r\n\r\nimport \"./search-books.scss\";\r\n\r\nclass SearchBooks extends Component {\r\n    static propTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        shelves: PropTypes.array.isRequired,\r\n    };\r\n\r\n    state = {\r\n        searchBooks: [],\r\n        query: \"\",\r\n    };\r\n\r\n    // Handle Change of input search\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        this.setState({ [name]: value }, () => {\r\n            this.handleSearch();\r\n        });\r\n    };\r\n\r\n    // Calling Back-End to bring the related data to search input.\r\n    handleSearch = async () => {\r\n        const query = this.state.query.trim();\r\n\r\n        try {\r\n            query &&\r\n                (await BooksAPI.search(query).then((books) =>\r\n                    Array.isArray(books)\r\n                        ? this.handleShelf(books)\r\n                        : this.handleShelf([])\r\n                ));\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    // Take all search Books and add [shelf] to books that I own.\r\n    handleShelf = (searchBooks) => {\r\n        const books = this.props.books;\r\n\r\n        for (const book of books) {\r\n            const oldBook = searchBooks.find(\r\n                (searchBook) => searchBook.id === book.id\r\n            );\r\n\r\n            if (oldBook) {\r\n                const index = searchBooks.indexOf(oldBook);\r\n                searchBooks[index] = {\r\n                    ...searchBooks[index],\r\n                    shelf: book.shelf,\r\n                };\r\n            }\r\n        }\r\n        this.setState({ searchBooks });\r\n    };\r\n\r\n    // Update the book with a new shelf\r\n    updateShelf = async (book, shelf) => {\r\n        await BooksAPI.update(book, shelf);\r\n        this.addShelfToState(book, shelf);\r\n    };\r\n\r\n    // Add the shelf key to the Book on the state.\r\n    addShelfToState = (book, shelf) => {\r\n        const searchBooks = this.state.searchBooks;\r\n        const index = searchBooks.indexOf(book);\r\n\r\n        searchBooks[index] = { ...searchBooks[index], shelf: shelf };\r\n\r\n        this.setState({ searchBooks });\r\n    };\r\n\r\n    render() {\r\n        const { searchBooks } = this.state;\r\n        const { shelves, location } = this.props;\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by title or author\"\r\n                        name=\"query\"\r\n                        value={this.state.query}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"search-results\">\r\n                    {this.state.query && Array.isArray(searchBooks) && (\r\n                        <BookShelf\r\n                            books={searchBooks}\r\n                            onUpdate={this.updateShelf}\r\n                            shelves={shelves}\r\n                            location={location}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SearchBooks);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./book-list.styles.scss\";\r\n\r\nimport Header from \"../header/header\";\r\nimport BookShelf from \"./../book-shelf/book-shelf\";\r\nimport SearchBooks from \"../search-books/search-box\";\r\n\r\nconst BookList = ({ books, shelves, onUpdate, getAllBooks }) => {\r\n    return (\r\n        <div className=\"book-list\">\r\n            <Header shelves={shelves} getAllBooks={getAllBooks} />\r\n\r\n            <div className=\"container\">\r\n                <Switch>\r\n                    <Route\r\n                        path=\"/search\"\r\n                        component={() => (\r\n                            <SearchBooks books={books} shelves={shelves} />\r\n                        )}\r\n                    />\r\n                    {shelves.map((shelf) => {\r\n                        const filteredBooks = books.filter(\r\n                            (relatedBook) => relatedBook.shelf === shelf.id\r\n                        );\r\n                        const pathURL = `/${shelf.id}`;\r\n\r\n                        return (\r\n                            <Route\r\n                                key={shelf.id}\r\n                                path={pathURL}\r\n                                render={(props) => (\r\n                                    <BookShelf\r\n                                        books={filteredBooks}\r\n                                        onUpdate={onUpdate}\r\n                                        shelves={shelves}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        );\r\n                    })}\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nBookList.propTypes = {\r\n    getAllBooks: PropTypes.func.isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    onUpdate: PropTypes.func.isRequired,\r\n    shelves: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default BookList;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport BookList from \"./components/book-list/book-list\";\r\n\r\nimport * as BooksAPI from \"./BooksAPI\";\r\n\r\nclass App extends Component {\r\n    state = { books: [] };\r\n\r\n    getAllBooks = async () => {\r\n        await BooksAPI.getAll().then((books) => this.setState({ books }));\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getAllBooks();\r\n    }\r\n\r\n    updateShelf = async (book, shelf) => {\r\n        await BooksAPI.update(book, shelf);\r\n        this.getAllBooks();\r\n    };\r\n\r\n    changeQuery = (query) => {\r\n        console.log(query);\r\n        const state = { ...this.state };\r\n        this.setState({ ...state, query });\r\n    };\r\n\r\n    render() {\r\n        const SHELVES = [\r\n            {\r\n                title: \"Currently Reading\",\r\n                id: \"currentlyReading\",\r\n            },\r\n            {\r\n                title: \"Want To Read\",\r\n                id: \"wantToRead\",\r\n            },\r\n            {\r\n                title: \"Read\",\r\n                id: \"read\",\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Route\r\n                    path=\"/\"\r\n                    render={() => (\r\n                        <BookList\r\n                            books={this.state.books}\r\n                            shelves={SHELVES}\r\n                            onUpdate={this.updateShelf}\r\n                            getAllBooks={this.getAllBooks}\r\n                        />\r\n                    )}\r\n                />\r\n                <Redirect from=\"/\" to=\"/currentlyReading\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}